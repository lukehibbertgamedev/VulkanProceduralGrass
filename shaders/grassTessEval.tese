#version 450

// Tessellation Evaluation Shader

// Executes once for each vertex that is generated by the tessellation process. This stage is responsible for the final shape of the blade.
// The bending of the blade is computed using spline interpolation of the quadratic bezier curve, acting as the grass blade's spine.

// Define the input patch as triangles, with equal distances between vertices within the patch, and with a winding order of counter-clockwise.
// Note that the winding order is important for face culling.
layout(isolines, equal_spacing, ccw) in;

// Will later require view and projection matrix here to convert the new vertices to clip space.

layout(location = 0) in vec4 inColor[];

layout(location = 0) out vec4 outColor;

void main() 
{    
    outColor = inColor[0];

    // the location within the tessellated abstract patch for this particular vertex. 
    // every input parameter other than this one will be identical for all TES invocations within a patch.
    float v = gl_TessCoord.x;

    // modify a part of the isoline (i think this is the righthand side of the tessellated isoline) to be above the world position point (p0).
    vec4 pos = gl_in[0].gl_Position;
    pos.y += (v * 0.2f) - v * 0.5f;

    gl_Position = pos;

    // Output color
    outColor = inColor[0]; // Pass through color from TCS
}