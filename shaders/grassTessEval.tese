#version 460 core

// Tessellation Evaluation Shader

// Executes once for each vertex that is generated by the tessellation process. This stage is responsible for the final shape of the blade.
// The bending of the blade is computed using spline interpolation of the quadratic bezier curve, acting as the grass blade's spine.

// Define the input patch as triangles, with equal distances between vertices within the patch, and with a winding order of counter-clockwise.
// Note that the winding order is important for face culling.
layout(quads, equal_spacing, ccw) in;

// Will later require view and projection matrix here to convert the new vertices to clip space.

layout(binding = 0) uniform CameraUniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout(location = 0) in vec4 inColor[];
layout(location = 1) in vec4 inPosition[];

layout(location = 0) out vec4 outColor;

void main() 
{    
    // gl_TessCoord - Barycentric coordinates : The location of a point corresponding to the tessellation patch.
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    gl_Position = (gl_TessCoord.x * gl_in[0].gl_Position) + (gl_TessCoord.y * gl_in[1].gl_Position) + (gl_TessCoord.z * gl_in[2].gl_Position);
    gl_Position = ubo.proj * ubo.view * gl_Position; // Matrix transformations go here if necessary.

    outColor = inColor[0]; 
}