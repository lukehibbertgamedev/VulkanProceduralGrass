#version 450

// A shader copy of the BladeInstanceData structure defined in GrassBlade.h.
// This contains all instances of all grass blades, indexed by gl_InstanceIndex.
struct BladeInstanceData {
    
    vec4 p0_and_width;
    vec4 p1_and_height;
    vec4 p2_and_direction;
    vec4 upVec_and_stiffness;             
};

// Read from the previous frame, and write to the current frame. 
// This will wrap so the updated current frame will become the readonly previous frame.
layout(std140, binding = 1) buffer BladeInstanceDataBufferLastFrame {
    BladeInstanceData bladesIn[]; 
};

// Write to the current frame, wrapped to the next frame to allow new data to be read.
layout(std140, binding = 2) buffer BladeInstanceDataBufferCurrentFrame {
    BladeInstanceData bladesOut[]; 
};

layout(push_constant) uniform PushConstants {
    float elapsed;
} pushConstants;

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint threadID_x = gl_GlobalInvocationID.x; // Thread ID within the grid's x-space.

    BladeInstanceData bladeIn = bladesIn[threadID_x];

    float frequency = 1.0;
    float amplitude = 0.4;
    float sway = amplitude * sin(pushConstants.elapsed * frequency);

    bladesOut[threadID_x].p2_and_direction.x = bladeIn.p2_and_direction.x + sway;  


}