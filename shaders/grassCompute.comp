#version 450

// A shader copy of the BladeInstanceData structure defined in GrassBlade.h.
// This contains all data of all grass blades.
struct BladeInstanceData {    
    vec4 p0_and_width;
    vec4 p1_and_height;
    vec4 p2_and_direction;
    vec4 upVec_and_stiffness;             
};

// UBO containing camera data. Bound to the model and grass pipeline so ignore model here.
layout(binding = 0) uniform CameraUniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

// The SSBO containing ALL blades.
layout(std140, binding = 1) buffer AllBladeInstanceDataBuffer {
    BladeInstanceData allBlades[]; 
} allBladeInstanceDataBuffer;

// The SSBO for the blades that are within frustum (this is the same binding used in the vert, tcs, tes, and frag shaders).
layout(std140, binding = 2) buffer VisibleBladeInstanceDataBuffer {
    BladeInstanceData visibleBlades[]; 
} visibleBladeInstanceDataBuffer;

// A buffer to write the number of visible blades after compute culling, this is displayed in ImGui.
layout(std140, binding = 3) buffer NumBladesBuffer {
    uint numVisible;
} numBladesBuffer;

// A sampler to sample the height map texture.
layout(binding = 4) uniform sampler2D heightMapSampler;

// Push constants for quick and easy readonly data that the shader needs.
layout(push_constant) uniform PushConstantsObject {    
    uint totalNumBlades;
    float elapsed;
} pushConstantsObject;

void keepPersistentLength(in vec3 v0, inout vec3 v1, inout vec3 v2, in float height) {
    vec3 v01 = v1 - v0;
    vec3 v12 = v2 - v1;
    float lv01 = length(v01);
    float lv12 = length(v12);
    float L1 = lv01 + lv12;
    float L0 = length(v2 - v0);

    //http://steve.hollasch.net/cgindex/curves/cbezarclen.html
    float L = (2.0 * L0 + L1) / 3.0;

    float ldiff = height / L;
    v01 = v01 * ldiff;
    v12 = v12 * ldiff;
    v1 = v0 + v01;
    v2 = v1 + v12;
}

//	Classic Perlin 3D Noise 
//	by Stefan Gustavson (https://github.com/stegu/webgl-noise)
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}
float cnoise(vec3 P){
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;
  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);
  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);
  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);
  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;
  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);
  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}
vec3 getWindOffset(vec3 pos, float w, float time) {
    vec3 direction = vec3(cos(radians(w)), 0.0, sin(radians(w))); // Assumes Z is up
    float posOnSin = direction.x * pos.x - direction.z * pos.y;
    float t = time + posOnSin + 4.0 * cnoise(pos);
    float windx = 2.0 * sin(0.5 * t);
    float windy = 1.0 * sin(1.0 * t);
    vec3 windVec = vec3(windx, windy, 0.0);
    return windVec * 0.25;
}

// 32 threads per-warp, as per most hardware requirements.
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    // Ensure the compute shader doesn't run more times than there are blades. 
    // This shader runs once per-blade. 
    if (gl_GlobalInvocationID.x >= pushConstantsObject.totalNumBlades) {   
        return;
    }
    //barrier();

    // Reset the number of culled blades.
    if (gl_GlobalInvocationID.x == 0) {
        numBladesBuffer.numVisible = 0;
    }
    //barrier();

    BladeInstanceData blade = allBladeInstanceDataBuffer.allBlades[gl_GlobalInvocationID.x]; // This blade instance.

    // UV coordinates for the height map sample.
    float u = ((blade.p0_and_width.x + 30.0) / 170.0);
    float v = 1.0 -((blade.p0_and_width.y + 30.0) / 170.0);
    vec2 outUV = vec2(v, u); // Effectively rotates the height map by -90 degrees, not sure why I have to do this.
    float terrainHeightSample = texture(heightMapSampler, outUV).r * 64.0; // Sample the height map.

    float terrainScale = 1.0;
    blade.p0_and_width.z -= -terrainHeightSample * terrainScale; // Offset the ground position to match the terrain.
    blade.p1_and_height.z -= -terrainHeightSample * terrainScale; // Offset the ground position to match the terrain.
    blade.p2_and_direction.z -= -terrainHeightSample * terrainScale; // Offset the ground position to match the terrain.

    // Frustum culling.
    float shrinkFactor = 1.0; // Shrink the frustum for testing purposes where 0 is no frustum and 1 is screen-space.    
    vec4 v0ClipSpace = ubo.proj * ubo.view * vec4(blade.p0_and_width.xyz, 1.0); v0ClipSpace /= v0ClipSpace.w;       // Normalise.
    vec4 v1ClipSpace = ubo.proj * ubo.view * vec4(blade.p1_and_height.xyz, 1.0); v1ClipSpace /= v1ClipSpace.w;      // Normalise.
    vec4 v2ClipSpace = ubo.proj * ubo.view * vec4(blade.p2_and_direction.xyz, 1.0); v2ClipSpace /= v2ClipSpace.w;   // Normalise.  
    bool v0OutFrustum = v0ClipSpace.x < -shrinkFactor || v0ClipSpace.x > shrinkFactor || v0ClipSpace.y < -shrinkFactor || v0ClipSpace.y > shrinkFactor;
    bool v1OutFrustum = v1ClipSpace.x < -shrinkFactor || v1ClipSpace.x > shrinkFactor || v1ClipSpace.y < -shrinkFactor || v1ClipSpace.y > shrinkFactor;
    bool v2OutFrustum = v2ClipSpace.x < -shrinkFactor || v2ClipSpace.x > shrinkFactor || v2ClipSpace.y < -shrinkFactor || v2ClipSpace.y > shrinkFactor;
    if (v0OutFrustum && v1OutFrustum && v2OutFrustum) {         
        return; // Cull.      
    } 

    // Wind forces.
    float height = blade.p1_and_height.w;
    vec3 directionVector = vec3(cos(radians(blade.p2_and_direction.w)), 0.0, sin(radians(blade.p2_and_direction.w))); // Assumes Z is up.
    vec3 modifiedP2 = blade.p2_and_direction.xyz;
    modifiedP2 += getWindOffset(blade.p2_and_direction.xyz, blade.p2_and_direction.w, pushConstantsObject.elapsed);
    keepPersistentLength(blade.p0_and_width.xyz, blade.p1_and_height.xyz, modifiedP2, height);
    blade.p2_and_direction.xyz = modifiedP2;

    // Update out blade, atomic add here since we want to not only add a blade, but index into this array with no data races.
    visibleBladeInstanceDataBuffer.visibleBlades[atomicAdd(numBladesBuffer.numVisible, 1)] = blade;

}